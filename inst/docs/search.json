[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BiocBookTesting",
    "section": "",
    "text": "##  Warning in packageDescription(\"BiocBookTesting\"): no package\n##  'BiocBookTesting' was found\n\nLocal preview\nWelcome\nThis is the landing page of the BiocBook entitled ‚Ä¶.\nThis book introduces the reader to ‚Ä¶.\nDocker image\nA Docker image built from this repository is available here:\nüëâ ghcr.io/lmweber/biocbooktesting üê≥\n\n\n\n\n\n\nGet started now üéâ\n\n\n\nYou can get access to all the packages used in this book in &lt; 1 minute, using this command in a terminal:\n\n\n\nbash\n\ndocker run -it ghcr.io/lmweber/biocbooktesting:devel R\n\n\n\n\nRStudio Server\nAn RStudio Server instance can be initiated from the Docker image as follows:\n\n\n\nbash\n\ndocker run \\\n    --volume &lt;local_folder&gt;:&lt;destination_folder&gt; \\\n    -e PASSWORD=OHCA \\\n    -p 8787:8787 \\\n    ghcr.io/lmweber/biocbooktesting:devel\n\n\nThe initiated RStudio Server instance will be available at https://localhost:8787.\n\nSession info\n\n\n\n\n\n\nClick to expand üëá\n\n\n\n\n\n\nsessioninfo::session_info(\n    installed.packages()[,\"Package\"], \n    include_base = TRUE\n)\n##  ‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n##   setting  value\n##   version  R version 4.4.1 (2024-06-14)\n##   os       macOS Sonoma 14.6.1\n##   system   x86_64, darwin20\n##   ui       X11\n##   language (EN)\n##   collate  en_US.UTF-8\n##   ctype    en_US.UTF-8\n##   tz       America/New_York\n##   date     2024-09-23\n##   pandoc   3.1.11 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/x86_64/ (via rmarkdown)\n##  \n##  ‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n##   ! package              * version   date (UTC) lib source\n##     abind                  1.4-8     2024-09-12 [1] CRAN (R 4.4.1)\n##     AnnotationDbi          1.66.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0)\n##     AnnotationHub          3.12.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     anytime                0.3.9     2020-08-27 [1] CRAN (R 4.4.0)\n##     askpass                1.2.0     2023-09-03 [1] CRAN (R 4.4.0)\n##     attempt                0.3.1     2020-05-03 [1] CRAN (R 4.4.0)\n##     available              1.1.0     2022-07-10 [1] CRAN (R 4.4.0)\n##     backports              1.5.0     2024-05-23 [1] CRAN (R 4.4.0)\n##     base                 * 4.4.1     2024-06-15 [?] local\n##     base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.4.0)\n##     beachmat               2.20.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     beeswarm               0.4.0     2021-06-01 [1] CRAN (R 4.4.0)\n##     benchmarkme            1.0.8     2022-06-12 [1] CRAN (R 4.4.0)\n##     benchmarkmeData        1.0.4     2020-04-23 [1] CRAN (R 4.4.0)\n##     BH                     1.84.0-0  2024-01-10 [1] CRAN (R 4.4.0)\n##     Biobase                2.64.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocBaseUtils          1.6.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocBook               1.2.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocCheck              1.40.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocFileCache          2.12.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocGenerics           0.50.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocIO                 1.14.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocManager            1.30.25   2024-08-28 [1] CRAN (R 4.4.1)\n##     BiocNeighbors          1.22.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocParallel           1.38.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocSingular           1.20.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     biocthis               1.14.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     BiocVersion            3.19.1    2024-04-17 [1] Bioconductor 3.19 (R 4.4.0)\n##     biocViews              1.72.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     Biostrings             2.72.1    2024-06-02 [1] Bioconductor 3.19 (R 4.4.0)\n##     bit                    4.5.0     2024-09-20 [1] CRAN (R 4.4.1)\n##     bit64                  4.5.2     2024-09-22 [1] CRAN (R 4.4.1)\n##     bitops                 1.0-8     2024-07-29 [1] CRAN (R 4.4.0)\n##     blob                   1.2.4     2023-03-17 [1] CRAN (R 4.4.0)\n##     bluster                1.14.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     boot                   1.3-31    2024-08-28 [1] CRAN (R 4.4.1)\n##     brio                   1.1.5     2024-04-24 [1] CRAN (R 4.4.0)\n##     BRISC                  1.0.5     2022-04-29 [1] CRAN (R 4.4.0)\n##     broom                  1.0.6     2024-05-17 [1] CRAN (R 4.4.0)\n##     bslib                  0.8.0     2024-07-29 [1] CRAN (R 4.4.0)\n##     cachem                 1.1.0     2024-05-16 [1] CRAN (R 4.4.0)\n##     Cairo                  1.6-2     2023-11-28 [1] CRAN (R 4.4.0)\n##     callr                  3.7.6     2024-03-25 [1] CRAN (R 4.4.0)\n##     cellranger             1.1.0     2016-07-27 [1] CRAN (R 4.4.0)\n##     circlize               0.4.16    2024-02-20 [1] CRAN (R 4.4.0)\n##     class                  7.3-22    2023-05-03 [1] CRAN (R 4.4.1)\n##     classInt               0.4-10    2023-09-05 [1] CRAN (R 4.4.0)\n##     cli                    3.6.3     2024-06-21 [1] CRAN (R 4.4.0)\n##     clipr                  0.8.0     2022-02-22 [1] CRAN (R 4.4.0)\n##     clisymbols             1.2.0     2017-05-21 [1] CRAN (R 4.4.0)\n##     clue                   0.3-65    2023-09-23 [1] CRAN (R 4.4.0)\n##     cluster                2.1.6     2023-12-01 [1] CRAN (R 4.4.1)\n##     codetools              0.2-20    2024-03-31 [1] CRAN (R 4.4.1)\n##     colorspace             2.1-1     2024-07-26 [1] CRAN (R 4.4.0)\n##     commonmark             1.9.1     2024-01-30 [1] CRAN (R 4.4.0)\n##   P compiler               4.4.1     2024-06-15 [1] local\n##     ComplexHeatmap         2.20.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     config                 0.3.2     2023-08-30 [1] CRAN (R 4.4.0)\n##     conflicted             1.2.0     2023-02-01 [1] CRAN (R 4.4.0)\n##     cowplot                1.1.3     2024-01-22 [1] CRAN (R 4.4.0)\n##     cpp11                  0.5.0     2024-08-27 [1] CRAN (R 4.4.1)\n##     crayon                 1.5.3     2024-06-20 [1] CRAN (R 4.4.0)\n##     credentials            2.0.1     2023-09-06 [1] CRAN (R 4.4.0)\n##     crosstalk              1.2.1     2023-11-23 [1] CRAN (R 4.4.0)\n##     curl                   5.2.3     2024-09-20 [1] CRAN (R 4.4.1)\n##     data.table             1.16.0    2024-08-27 [1] CRAN (R 4.4.1)\n##   P datasets             * 4.4.1     2024-06-15 [1] local\n##     DBI                    1.2.3     2024-06-02 [1] CRAN (R 4.4.0)\n##     dbplyr                 2.5.0     2024-03-19 [1] CRAN (R 4.4.0)\n##     DelayedArray           0.30.1    2024-05-07 [1] Bioconductor 3.19 (R 4.4.0)\n##     DelayedMatrixStats     1.26.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     deldir                 2.0-4     2024-02-28 [1] CRAN (R 4.4.0)\n##     desc                   1.4.3     2023-12-10 [1] CRAN (R 4.4.0)\n##     diffobj                0.3.5     2021-10-05 [1] CRAN (R 4.4.0)\n##     digest                 0.6.37    2024-08-19 [1] CRAN (R 4.4.1)\n##     doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.4.0)\n##     dotCall64              1.1-1     2023-11-28 [1] CRAN (R 4.4.0)\n##     dplyr                  1.1.4     2023-11-17 [1] CRAN (R 4.4.0)\n##     dqrng                  0.4.1     2024-05-28 [1] CRAN (R 4.4.0)\n##     DT                     0.33      2024-04-04 [1] CRAN (R 4.4.0)\n##     dtplyr                 1.3.1     2023-03-22 [1] CRAN (R 4.4.0)\n##     e1071                  1.7-16    2024-09-16 [1] CRAN (R 4.4.1)\n##     edgeR                  4.2.1     2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n##     ellipsis               0.3.2     2021-04-29 [1] CRAN (R 4.4.0)\n##     evaluate               1.0.0     2024-09-17 [1] CRAN (R 4.4.1)\n##     ExperimentHub          2.12.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.4.0)\n##     farver                 2.1.2     2024-05-13 [1] CRAN (R 4.4.0)\n##     fastmap                1.2.0     2024-05-15 [1] CRAN (R 4.4.0)\n##     fields                 16.2      2024-06-27 [1] CRAN (R 4.4.0)\n##     filelock               1.0.3     2023-12-11 [1] CRAN (R 4.4.0)\n##     FNN                    1.1.4.1   2024-09-22 [1] CRAN (R 4.4.1)\n##     fontawesome            0.5.2     2023-08-19 [1] CRAN (R 4.4.0)\n##     forcats                1.0.0     2023-01-29 [1] CRAN (R 4.4.0)\n##     foreach                1.5.2     2022-02-02 [1] CRAN (R 4.4.0)\n##     foreign                0.8-87    2024-06-26 [1] CRAN (R 4.4.0)\n##     formatR                1.14      2023-01-17 [1] CRAN (R 4.4.0)\n##     fs                     1.6.4     2024-04-25 [1] CRAN (R 4.4.0)\n##     futile.logger          1.4.3     2016-07-10 [1] CRAN (R 4.4.0)\n##     futile.options         1.0.1     2018-04-20 [1] CRAN (R 4.4.0)\n##     gargle                 1.5.2     2023-07-20 [1] CRAN (R 4.4.0)\n##     generics               0.1.3     2022-07-05 [1] CRAN (R 4.4.0)\n##     GenomeInfoDb           1.40.1    2024-05-24 [1] Bioconductor 3.19 (R 4.4.0)\n##     GenomeInfoDbData       1.2.12    2024-05-08 [1] Bioconductor\n##     GenomicAlignments      1.40.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     GenomicRanges          1.56.1    2024-06-16 [1] Bioconductor 3.19 (R 4.4.0)\n##     gert                   2.1.2     2024-09-20 [1] CRAN (R 4.4.1)\n##     GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.4.0)\n##     ggbeeswarm             0.7.2     2023-04-29 [1] CRAN (R 4.4.0)\n##     ggplot2                3.5.1     2024-04-23 [1] CRAN (R 4.4.0)\n##     ggrastr                1.0.2     2023-06-01 [1] CRAN (R 4.4.0)\n##     ggrepel                0.9.6     2024-09-07 [1] CRAN (R 4.4.1)\n##     ggside                 0.3.1     2024-03-01 [1] CRAN (R 4.4.0)\n##     ggspavis               1.10.0    2024-05-16 [1] Bioconductor 3.19 (R 4.4.0)\n##     gh                     1.4.1     2024-03-28 [1] CRAN (R 4.4.0)\n##     gitcreds               0.1.2     2022-09-08 [1] CRAN (R 4.4.0)\n##     GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.4.0)\n##     glue                   1.7.0     2024-01-09 [1] CRAN (R 4.4.0)\n##     golem                  0.5.1     2024-08-27 [1] CRAN (R 4.4.1)\n##     googledrive            2.1.1     2023-06-11 [1] CRAN (R 4.4.0)\n##     googlesheets4          1.1.1     2023-06-11 [1] CRAN (R 4.4.0)\n##     graph                  1.82.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##   P graphics             * 4.4.1     2024-06-15 [1] local\n##   P grDevices            * 4.4.1     2024-06-15 [1] local\n##     grid                   4.4.1     2024-06-15 [?] local\n##     gridExtra              2.3       2017-09-09 [1] CRAN (R 4.4.0)\n##     gtable                 0.3.5     2024-04-22 [1] CRAN (R 4.4.0)\n##     haven                  2.5.4     2023-11-30 [1] CRAN (R 4.4.0)\n##     HDF5Array              1.32.1    2024-08-11 [1] Bioconductor 3.19 (R 4.4.1)\n##     here                   1.0.1     2020-12-13 [1] CRAN (R 4.4.0)\n##     highr                  0.11      2024-05-26 [1] CRAN (R 4.4.0)\n##     hms                    1.1.3     2023-03-21 [1] CRAN (R 4.4.0)\n##     htmltools              0.5.8.1   2024-04-04 [1] CRAN (R 4.4.0)\n##     htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.4.0)\n##     httpuv                 1.6.15    2024-03-26 [1] CRAN (R 4.4.0)\n##     httr                   1.4.7     2023-08-15 [1] CRAN (R 4.4.0)\n##     httr2                  1.0.4     2024-09-13 [1] CRAN (R 4.4.1)\n##     ids                    1.0.1     2017-05-31 [1] CRAN (R 4.4.0)\n##     igraph                 2.0.3     2024-03-13 [1] CRAN (R 4.4.0)\n##     ini                    0.3.1     2018-05-20 [1] CRAN (R 4.4.0)\n##     IRanges                2.38.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n##     irlba                  2.3.5.1   2022-10-03 [1] CRAN (R 4.4.0)\n##     isoband                0.2.7     2022-12-20 [1] CRAN (R 4.4.0)\n##     iterators              1.0.14    2022-02-05 [1] CRAN (R 4.4.0)\n##     janeaustenr            1.0.0     2022-08-26 [1] CRAN (R 4.4.0)\n##     jquerylib              0.1.4     2021-04-26 [1] CRAN (R 4.4.0)\n##     jsonlite               1.8.9     2024-09-20 [1] CRAN (R 4.4.1)\n##     KEGGREST               1.44.1    2024-06-19 [1] Bioconductor 3.19 (R 4.4.0)\n##     KernSmooth             2.23-24   2024-05-17 [1] CRAN (R 4.4.1)\n##     knitr                  1.48      2024-07-07 [1] CRAN (R 4.4.0)\n##     labeling               0.4.3     2023-08-29 [1] CRAN (R 4.4.0)\n##     lambda.r               1.2.4     2019-09-18 [1] CRAN (R 4.4.0)\n##     later                  1.3.2     2023-12-06 [1] CRAN (R 4.4.0)\n##     lattice                0.22-6    2024-03-20 [1] CRAN (R 4.4.1)\n##     lazyeval               0.2.2     2019-03-15 [1] CRAN (R 4.4.0)\n##     lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.4.0)\n##     limma                  3.60.4    2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n##     lobstr                 1.1.2     2022-06-22 [1] CRAN (R 4.4.0)\n##     locfit                 1.5-9.10  2024-06-24 [1] CRAN (R 4.4.0)\n##     lubridate              1.9.3     2023-09-27 [1] CRAN (R 4.4.0)\n##     magick                 2.8.5     2024-09-20 [1] CRAN (R 4.4.1)\n##     magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.4.0)\n##     maps                   3.4.2     2023-12-15 [1] CRAN (R 4.4.0)\n##     MASS                   7.3-61    2024-06-13 [1] CRAN (R 4.4.0)\n##     Matrix                 1.7-0     2024-04-26 [1] CRAN (R 4.4.1)\n##     MatrixGenerics         1.16.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     matrixStats            1.4.1     2024-09-08 [1] CRAN (R 4.4.1)\n##     memoise                2.0.1     2021-11-26 [1] CRAN (R 4.4.0)\n##     metapod                1.12.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##   P methods              * 4.4.1     2024-06-15 [1] local\n##     mgcv                   1.9-1     2023-12-21 [1] CRAN (R 4.4.1)\n##     mime                   0.12      2021-09-28 [1] CRAN (R 4.4.0)\n##     modelr                 0.1.11    2023-03-22 [1] CRAN (R 4.4.0)\n##     munsell                0.5.1     2024-04-01 [1] CRAN (R 4.4.0)\n##     nlme                   3.1-166   2024-08-14 [1] CRAN (R 4.4.1)\n##     nnet                   7.3-19    2023-05-03 [1] CRAN (R 4.4.1)\n##     nnSVG                  1.8.0     2024-05-16 [1] Bioconductor 3.19 (R 4.4.0)\n##     openssl                2.2.2     2024-09-20 [1] CRAN (R 4.4.1)\n##     paletteer              1.6.0     2024-01-21 [1] CRAN (R 4.4.0)\n##     parallel               4.4.1     2024-06-15 [?] local\n##     pbapply                1.7-2     2023-06-27 [1] CRAN (R 4.4.0)\n##     pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.4.0)\n##     pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.4.0)\n##     pkgbuild               1.4.4     2024-03-17 [1] CRAN (R 4.4.0)\n##     pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.4.0)\n##     pkgload                1.4.0     2024-06-28 [1] CRAN (R 4.4.0)\n##     plogr                  0.2.0     2018-03-25 [1] CRAN (R 4.4.0)\n##     plotly                 4.10.4    2024-01-13 [1] CRAN (R 4.4.0)\n##     png                    0.1-8     2022-11-29 [1] CRAN (R 4.4.0)\n##     praise                 1.0.0     2015-08-11 [1] CRAN (R 4.4.0)\n##     prettyunits            1.2.0     2023-09-24 [1] CRAN (R 4.4.0)\n##     prismatic              1.1.2     2024-04-10 [1] CRAN (R 4.4.0)\n##     processx               3.8.4     2024-03-16 [1] CRAN (R 4.4.0)\n##     progress               1.2.3     2023-12-06 [1] CRAN (R 4.4.0)\n##     promises               1.3.0     2024-04-05 [1] CRAN (R 4.4.0)\n##     proxy                  0.4-27    2022-06-09 [1] CRAN (R 4.4.0)\n##     ps                     1.8.0     2024-09-12 [1] CRAN (R 4.4.1)\n##     purrr                  1.0.2     2023-08-10 [1] CRAN (R 4.4.0)\n##     quarto                 1.4.4     2024-07-20 [1] CRAN (R 4.4.0)\n##     R.cache                0.16.0    2022-07-21 [1] CRAN (R 4.4.0)\n##     R.methodsS3            1.8.2     2022-06-13 [1] CRAN (R 4.4.0)\n##     R.oo                   1.26.0    2024-01-24 [1] CRAN (R 4.4.0)\n##     R.utils                2.12.3    2023-11-18 [1] CRAN (R 4.4.0)\n##     R6                     2.5.1     2021-08-19 [1] CRAN (R 4.4.0)\n##     ragg                   1.3.3     2024-09-11 [1] CRAN (R 4.4.1)\n##     RANN                   2.6.2     2024-08-25 [1] CRAN (R 4.4.1)\n##     rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.4.0)\n##     RBGL                   1.80.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.4.0)\n##     Rcpp                   1.0.13    2024-07-17 [1] CRAN (R 4.4.0)\n##     RcppAnnoy              0.0.22    2024-01-23 [1] CRAN (R 4.4.0)\n##     RcppArmadillo          14.0.2-1  2024-09-12 [1] CRAN (R 4.4.1)\n##     RcppEigen              0.3.4.0.2 2024-08-24 [1] CRAN (R 4.4.1)\n##     RcppHNSW               0.6.0     2024-02-04 [1] CRAN (R 4.4.0)\n##     RcppML                 0.3.7     2021-09-21 [1] CRAN (R 4.4.0)\n##     RcppProgress           0.4.2     2020-02-06 [1] CRAN (R 4.4.0)\n##     RCurl                  1.98-1.16 2024-07-11 [1] CRAN (R 4.4.0)\n##     rdist                  0.0.5     2020-05-04 [1] CRAN (R 4.4.0)\n##     readr                  2.1.5     2024-01-10 [1] CRAN (R 4.4.0)\n##     readxl                 1.4.3     2023-07-06 [1] CRAN (R 4.4.0)\n##     rematch                2.0.0     2023-08-30 [1] CRAN (R 4.4.0)\n##     rematch2               2.1.2     2020-05-01 [1] CRAN (R 4.4.0)\n##     remotes                2.5.0     2024-03-17 [1] CRAN (R 4.4.0)\n##     renv                   1.0.8     2024-09-20 [1] CRAN (R 4.4.1)\n##     reprex                 2.1.1     2024-07-06 [1] CRAN (R 4.4.0)\n##     restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.4.0)\n##     rhdf5                  2.48.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     rhdf5filters           1.16.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     Rhdf5lib               1.26.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     Rhtslib                3.0.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     rjson                  0.2.23    2024-09-16 [1] CRAN (R 4.4.1)\n##     rlang                  1.1.4     2024-06-04 [1] CRAN (R 4.4.0)\n##     rmarkdown              2.28      2024-08-17 [1] CRAN (R 4.4.1)\n##     rpart                  4.1.23    2023-12-05 [1] CRAN (R 4.4.1)\n##     rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.4.0)\n##     Rsamtools              2.20.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     RSpectra               0.16-2    2024-07-18 [1] CRAN (R 4.4.0)\n##     RSQLite                2.3.7     2024-05-27 [1] CRAN (R 4.4.0)\n##     rstudioapi             0.16.0    2024-03-24 [1] CRAN (R 4.4.0)\n##     rsvd                   1.0.5     2021-04-16 [1] CRAN (R 4.4.0)\n##     rtracklayer            1.64.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0)\n##     Rtsne                  0.17      2023-12-07 [1] CRAN (R 4.4.0)\n##     RUnit                  0.4.33    2024-02-22 [1] CRAN (R 4.4.0)\n##     rvest                  1.0.4     2024-02-12 [1] CRAN (R 4.4.0)\n##     s2                     1.1.7     2024-07-17 [1] CRAN (R 4.4.0)\n##     S4Arrays               1.4.1     2024-05-20 [1] Bioconductor 3.19 (R 4.4.0)\n##     S4Vectors              0.42.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n##     sass                   0.4.9     2024-03-15 [1] CRAN (R 4.4.0)\n##     ScaledMatrix           1.12.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     scales                 1.3.0     2023-11-28 [1] CRAN (R 4.4.0)\n##     scater                 1.32.1    2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n##     scatterbar             0.1.0     2024-08-26 [1] Github (JEFworks-Lab/scatterbar@b521fde)\n##     scran                  1.32.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     scuttle                1.14.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0)\n##     selectr                0.4-2     2019-11-20 [1] CRAN (R 4.4.0)\n##     sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.4.0)\n##     sf                     1.0-17    2024-09-06 [1] CRAN (R 4.4.1)\n##     shape                  1.4.6.1   2024-02-23 [1] CRAN (R 4.4.0)\n##     shiny                  1.9.1     2024-08-01 [1] CRAN (R 4.4.0)\n##     shinyWidgets           0.8.7     2024-09-23 [1] CRAN (R 4.4.1)\n##     SingleCellExperiment   1.26.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     sitmo                  2.0.2     2021-10-13 [1] CRAN (R 4.4.0)\n##     smoothclust            1.0.0     2024-05-16 [1] Bioconductor 3.19 (R 4.4.0)\n##     snow                   0.4-4     2021-10-27 [1] CRAN (R 4.4.0)\n##     SnowballC              0.7.1     2023-04-25 [1] CRAN (R 4.4.0)\n##     sourcetools            0.1.7-1   2023-02-01 [1] CRAN (R 4.4.0)\n##     sp                     2.1-4     2024-04-30 [1] CRAN (R 4.4.0)\n##     spam                   2.10-0    2023-10-23 [1] CRAN (R 4.4.0)\n##     SparseArray            1.4.8     2024-05-24 [1] Bioconductor 3.19 (R 4.4.0)\n##     sparseMatrixStats      1.16.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     spatial                7.3-17    2023-07-20 [1] CRAN (R 4.4.1)\n##     SpatialExperiment      1.14.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     spatialLIBD            1.16.2    2024-05-28 [1] Bioconductor 3.19 (R 4.4.0)\n##     spData                 2.3.3     2024-09-02 [1] CRAN (R 4.4.1)\n##     spdep                  1.3-6     2024-09-13 [1] CRAN (R 4.4.1)\n##     splines                4.4.1     2024-06-15 [?] local\n##     statmod                1.5.0     2023-01-06 [1] CRAN (R 4.4.0)\n##   P stats                * 4.4.1     2024-06-15 [1] local\n##     stats4                 4.4.1     2024-06-15 [?] local\n##     STexampleData          1.12.3    2024-05-21 [1] Bioconductor 3.19 (R 4.4.0)\n##     stringdist             0.9.12    2023-11-28 [1] CRAN (R 4.4.0)\n##     stringi                1.8.4     2024-05-06 [1] CRAN (R 4.4.0)\n##     stringr                1.5.1     2023-11-14 [1] CRAN (R 4.4.0)\n##     styler                 1.10.3    2024-04-07 [1] CRAN (R 4.4.0)\n##     SummarizedExperiment   1.34.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     survival               3.7-0     2024-06-05 [1] CRAN (R 4.4.0)\n##     sys                    3.4.2     2023-05-23 [1] CRAN (R 4.4.0)\n##     systemfonts            1.1.0     2024-05-15 [1] CRAN (R 4.4.0)\n##     tcltk                  4.4.1     2024-06-15 [?] local\n##     testthat               3.2.1.1   2024-04-14 [1] CRAN (R 4.4.0)\n##     textshaping            0.4.0     2024-05-24 [1] CRAN (R 4.4.0)\n##     tibble                 3.2.1     2023-03-20 [1] CRAN (R 4.4.0)\n##     tidyr                  1.3.1     2024-01-24 [1] CRAN (R 4.4.0)\n##     tidyselect             1.2.1     2024-03-11 [1] CRAN (R 4.4.0)\n##     tidytext               0.4.2     2024-04-10 [1] CRAN (R 4.4.0)\n##     tidyverse              2.0.0     2023-02-22 [1] CRAN (R 4.4.0)\n##     timechange             0.3.0     2024-01-18 [1] CRAN (R 4.4.0)\n##     tinytex                0.53      2024-09-15 [1] CRAN (R 4.4.1)\n##     tokenizers             0.3.0     2022-12-22 [1] CRAN (R 4.4.0)\n##   P tools                  4.4.1     2024-06-15 [1] local\n##     tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.4.0)\n##     UCSC.utils             1.0.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.0)\n##     units                  0.8-5     2023-11-28 [1] CRAN (R 4.4.0)\n##     usethis                3.0.0     2024-07-29 [1] CRAN (R 4.4.0)\n##     utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.4.0)\n##   P utils                * 4.4.1     2024-06-15 [1] local\n##     uuid                   1.2-1     2024-07-29 [1] CRAN (R 4.4.0)\n##     uwot                   0.2.2     2024-04-21 [1] CRAN (R 4.4.0)\n##     vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.4.0)\n##     vipor                  0.4.7     2023-12-18 [1] CRAN (R 4.4.0)\n##     viridis                0.6.5     2024-01-29 [1] CRAN (R 4.4.0)\n##     viridisLite            0.4.2     2023-05-02 [1] CRAN (R 4.4.0)\n##     vroom                  1.6.5     2023-12-05 [1] CRAN (R 4.4.0)\n##     waldo                  0.5.3     2024-08-23 [1] CRAN (R 4.4.1)\n##     WeberDivechaLCdata     1.6.0     2024-05-02 [1] Bioconductor 3.19 (R 4.4.0)\n##     whisker                0.4.1     2022-12-05 [1] CRAN (R 4.4.0)\n##     withr                  3.0.1     2024-07-31 [1] CRAN (R 4.4.0)\n##     wk                     0.9.3     2024-09-06 [1] CRAN (R 4.4.1)\n##     xfun                   0.47      2024-08-17 [1] CRAN (R 4.4.1)\n##     XML                    3.99-0.17 2024-06-25 [1] CRAN (R 4.4.0)\n##     xml2                   1.3.6     2023-12-04 [1] CRAN (R 4.4.0)\n##     xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.4.0)\n##     XVector                0.44.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##     yaml                   2.3.10    2024-07-26 [1] CRAN (R 4.4.0)\n##     yesno                  0.1.3     2024-07-26 [1] CRAN (R 4.4.0)\n##     zip                    2.3.1     2024-01-27 [1] CRAN (R 4.4.0)\n##     zlibbioc               1.50.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.0)\n##  \n##   [1] /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library\n##  \n##   P ‚îÄ‚îÄ Loaded and on-disk path mismatch.\n##  \n##  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/introduction.html",
    "href": "pages/introduction.html",
    "title": "1¬† Introduction",
    "section": "",
    "text": "Add text here\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/introduction.html#overview",
    "href": "pages/introduction.html#overview",
    "title": "1¬† Introduction",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nThis book provides discussion and interactive examples on best practices for computational analysis workflows for spatial transcriptomics data, using the Bioconductor framework within R."
  },
  {
    "objectID": "pages/introduction.html#contents",
    "href": "pages/introduction.html#contents",
    "title": "1¬† Introduction",
    "section": "1.2 Contents",
    "text": "1.2 Contents\nThe chapters are organized into several parts:\n\nIntroduction: introduction, background on spatial transcriptomics, and R/Bioconductor data classes\nAnalysis steps: individual analysis steps\nWorkflows: examples of complete analysis workflows\nAppendix: related resources, acknowledgments, and references"
  },
  {
    "objectID": "pages/introduction.html#scope-and-who-this-book-is-for",
    "href": "pages/introduction.html#scope-and-who-this-book-is-for",
    "title": "1¬† Introduction",
    "section": "1.3 Scope and who this book is for",
    "text": "1.3 Scope and who this book is for\nThe aim of this book is to demonstrate best practices for computational analysis workflows for spatial transcriptomics data through interactive examples and discussion using R code and example datasets. We assume some familiarity with R programming and an understanding of the types of biological questions that single-cell and spatial transcriptomics can be used to answer. Previous experience with Bioconductor is not required. By working through the examples in this book, readers will be able to adapt or extend the example workflows to analyze their own data.\nIn general, we focus on downstream analysis methods, which start with a gene expression count table and spatial coordinates as the main inputs. Preprocessing procedures to generate gene expression count tables are covered in other resources (e.g.¬†our related book Visium Data Preprocessing for data from the 10x Genomics Visium platform) and tutorials provided by the manufacturers of the technological platforms. For molecule-based platforms, we will usually use data that has been aggregated to the cell level.\nFor analysis steps where a number of different methods are available, we will showcase examples of methods that we have found to work well and are computationally scalable, with a preference for methods available through Bioconductor.\nAll methods used in this book are available through Bioconductor or CRAN (in R) or PyPI (in Python) to ensure installability and long-term maintenance. We also mention a number of additional methods that are available as packages from GitHub, but these are not run within the code examples."
  },
  {
    "objectID": "pages/introduction.html#bioconductor",
    "href": "pages/introduction.html#bioconductor",
    "title": "1¬† Introduction",
    "section": "1.4 Bioconductor",
    "text": "1.4 Bioconductor\nBioconductor is an ‚Äòopen source and open development‚Äô project providing a cohesive and flexible framework for rigorous and reproducible analyses of high-throughput genomic data in R (Huber et al. 2015). Bioconductor provides access to more than 2,000 contributed R packages, as well as infrastructure maintained by the Bioconductor Core Team, providing a rich analysis environment for users.\nA key strength of the Bioconductor framework is the modularity and open development philosophy. R packages are contributed by numerous research groups around the world, with the Bioconductor Core Team coordinating the overall project and maintaining infrastructure, build testing, and development guidelines. Contributed packages use consistent data structures, enabling users to connect packages developed by different groups to build analysis workflows that include the latest state-of-the-art methods. Bioconductor packages also include comprehensive documentation, including long-form tutorials or package vignettes."
  },
  {
    "objectID": "pages/introduction.html#additional-resources",
    "href": "pages/introduction.html#additional-resources",
    "title": "1¬† Introduction",
    "section": "1.5 Additional resources",
    "text": "1.5 Additional resources\nFor readers who are new to R and Bioconductor, additional useful resources include:\n\nThe Orchestrating Single-Cell Analysis with Bioconductor (OSCA) online book (Amezquita et al. 2020), which contains comprehensive materials on analysis workflows for non-spatial single-cell data as well as further introductory materials on R and Bioconductor.\nThe R for Data Science online book provides an excellent introduction to R.\nData Carpentry and Software Carpentry provide online lesson materials on R programming, the Unix shell, and version control.\nThe R/Bioconductor Data Science Team at the Lieber Institute for Brain Development has a detailed guide of free resources and videos to learn more about R and Bioconductor, as well as YouTube videos, including some on the basics of Bioconductor and infrastructure for storing gene expression data.\nThe Visium Data Preprocessing online book provides details on data preprocessing procedures for spatial transcriptomics data from the 10x Genomics Visium platform."
  },
  {
    "objectID": "pages/introduction.html#contributions",
    "href": "pages/introduction.html#contributions",
    "title": "1¬† Introduction",
    "section": "1.6 Contributions",
    "text": "1.6 Contributions\nWe welcome suggestions for updates and additions to the book. Suggestions may be provided as GitHub issues for further discussion with the maintainers.\nNote that all methods to be run within code examples must be available as either R packages from Bioconductor or CRAN, or Python packages from PyPI. This restriction provides readers with guarantees regarding installability, long-term availability, maintenance, and compatibility. Packages that are only available from GitHub or other repositories may be discussed within the text, but will not be included in the code examples. In general, our philosophy is to showcase examples of analysis methods that we have found to work well, are computationally scalable, user-friendly, and which can be integrated into existing Bioconductor-based workflows.\n\n\n\n\nAmezquita, Robert A., Aaron T. L. Lun, Etienne Becht, Vince J. Carey, Lindsay N. Carpp, Ludwig Geistlinger, Federico Marini, et al. 2020. ‚ÄúOrchestrating Single-Cell Analysis with Bioconductor.‚Äù Nature Methods 17: 137‚Äì45. https://doi.org/10.1038/s41592-019-0654-x.\n\n\nHuber, Wolfgang, Vincent J. Carey, Robert Gentleman, Simon Anders, Marc Carlson, Benilton S. Carvalho, Hector Corrada Bravo, et al. 2015. ‚ÄúOrchestrating High-Throughput Genomic Analysis with Bioconductor.‚Äù Nature Methods 12: 115‚Äì21. https://doi.org/10.1038/nmeth.3252."
  },
  {
    "objectID": "pages/clustering.html#overview",
    "href": "pages/clustering.html#overview",
    "title": "2¬† Clustering",
    "section": "\n2.1 Overview",
    "text": "2.1 Overview\nIn ST data, we can apply clustering algorithms to identify ‚Äòspatial domains‚Äô, which represent spatially defined regions consisting of relatively consistent gene expression profiles. For example, spatial domains may consist of regions containing cells from a single cell type or a consistent mixture of cell types.\nSeveral alternative approaches exist for these analyses. For example, we can apply standard clustering algorithms from single-cell workflows to identify cell types without taking any spatial information into account, and then analyze the spatial distributions of these cell types. Alternatively, we can use spatially-aware clustering algorithms that directly take the spatial coordinates of the measurements into account. For larger datasets, there may also be important computational tradeoffs between the various approaches.\nIt is also important to keep in mind that when we use clustering to define cell types and/or states, these can be defined at various resolutions (or even on a continuum). The optimal number of clusters depends on the biological context ‚Äì in particular, there is no ‚Äútrue‚Äù number of clusters, since this depends on the biological context (e.g.¬†if we are comparing major cell populations vs.¬†comparing rare subtypes), so the choice of the optimal number of clusters requires some judgment and biological interpretation.\nOnce we have identified spatial domains, these can then be further investigated in additional downstream analyses."
  },
  {
    "objectID": "pages/clustering.html#load-data-from-previous-steps",
    "href": "pages/clustering.html#load-data-from-previous-steps",
    "title": "2¬† Clustering",
    "section": "\n2.2 Load data from previous steps",
    "text": "2.2 Load data from previous steps\nWe start by loading the data object(s) saved after running the analysis steps from the previous chapters. Code to re-run the previous steps is shown in condensed form in ?sec-analysis-steps.\n\nlibrary(SpatialExperiment)\nlibrary(here)\nspe &lt;- readRDS(here(\"outputs/spe_reduceddims.rds\"))\nspe_full &lt;- readRDS(here(\"outputs/spe_logcounts.rds\"))"
  },
  {
    "objectID": "pages/clustering.html#non-spatial-clustering",
    "href": "pages/clustering.html#non-spatial-clustering",
    "title": "2¬† Clustering",
    "section": "\n2.3 Non-spatial clustering",
    "text": "2.3 Non-spatial clustering\n\n2.3.1 Clustering using HVGs\nHere, we perform clustering by applying standard clustering methods developed for single-cell RNA sequencing data, using molecular features (gene expression) only. We apply graph-based clustering using the Walktrap method implemented in scran (Lun, McCarthy, and Marioni 2016), applied to the top 50 PCs calculated on the set of top HVGs.\nIn the context of spatial data, this is the same as applying clustering to identify cell types in single-cell data (although each spot may contain one or more cells, depending on the platform and tissue cell density), and means that we are assuming that biologically informative spatial distribution patterns of cell types can be detected from the molecular features (gene expression).\n\nlibrary(scran)\n\n\n# graph-based clustering\nset.seed(123)\nk &lt;- 10\ng &lt;- buildSNNGraph(spe, k = k, use.dimred = \"PCA\")\ng_walk &lt;- igraph::cluster_walktrap(g)\nclus &lt;- g_walk$membership\ntable(clus)\n##  clus\n##     1    2    3    4    5    6 \n##   359 1187  447  291  693  547\n\n# store cluster labels in column 'label' in colData\ncolLabels(spe) &lt;- factor(clus)\n\nVisualize the clusters by plotting in (i) spatial (x-y) coordinates on the tissue slide, and (ii) reduced dimension space (PCA or UMAP). We use plotting functions from the ggspavis package.\nFor reference, we also display the ground truth (manually annotated) labels available for this dataset (in spatial coordinates).\nFrom the visualizations, we can see that the clustering reproduces the known biological structure (cortical layers), although not perfectly. The clusters are also separated in UMAP space, but again not perfectly.\n\nlibrary(ggspavis)\n\n\n# plot clusters in spatial x-y coordinates\nplotSpots(spe, annotate = \"label\", \n          pal = \"libd_layer_colors\")\n\n\n\n\n\n\n\n# plot ground truth labels in spatial coordinates\nplotSpots(spe, annotate = \"ground_truth\", \n          pal = \"libd_layer_colors\")\n\n\n\n\n\n\n\n\n# plot clusters in PCA reduced dimensions\nplotDimRed(spe, plot_type = \"PCA\", \n           annotate = \"label\", pal = \"libd_layer_colors\")\n\n\n\n\n\n\n\n# plot clusters in UMAP reduced dimensions\nplotDimRed(spe, plot_type = \"UMAP\", \n           annotate = \"label\", pal = \"libd_layer_colors\")"
  },
  {
    "objectID": "pages/clustering.html#spatially-aware-clustering",
    "href": "pages/clustering.html#spatially-aware-clustering",
    "title": "2¬† Clustering",
    "section": "\n2.4 Spatially-aware clustering",
    "text": "2.4 Spatially-aware clustering\nThe example above shows that non-spatial clustering can capture some spatial relationships in ST data, primarily if these are due to spatially distributed cell types and where the cell types can be identified from their gene expression profiles alone. However, this does not directly make use of the spatial information contained in the measurements.\nIn many ST datasets, we can uncover further structure by performing analyses that directly take spatial information into account. Below, we demonstrate examples of these types of analyses, which we refer to as ‚Äòspatially-aware clustering‚Äô.\n\n2.4.1 Clustering using SVGs\nOne way to perform spatially-aware clustering is to first perform spatially-aware feature selection to identify a set of top spatially variable genes (SVGs) (see ?sec-feature-selection) and then use the set of top SVGs as the input for clustering.\nIn this case, the spatial information is taken into account during the feature selection stage, where we select a set of top SVGs instead of top HVGs. For the clustering stage, we can use the same algorithms as for non-spatial clustering.\nHere, we demonstrate an example using nnSVG (Weber et al. 2023) to select the set of top SVGs. Note that in this example, we run nnSVG using a small subset of the dataset for faster runtime. For a full analysis, the full dataset should be used (see ?sec-feature-selection for more details).\n\nlibrary(nnSVG)\n\n\n# subsample spots for faster runtime in this example\n# note: skip this step in full analysis\nn &lt;- 100\nset.seed(123)\nix &lt;- sample(seq_len(n), n)\nspe_nnSVG &lt;- spe_full[, ix]  ## note: using full object from logcounts step\n\n# filter low-expressed and mitochondrial genes\n# using stringent filtering for faster runtime in this example\n# note: use default filtering in full analysis\nspe_nnSVG &lt;- filter_genes(\n  spe_nnSVG, filter_genes_ncounts = 10, filter_genes_pcspots = 3\n)\n##  Gene filtering: removing mitochondrial genes\n##  removed 13 mitochondrial genes\n##  Gene filtering: retaining genes with at least 10 counts in at least 3% (n = 3) of spatial locations\n##  removed 33353 out of 33525 genes due to low expression\n\n# re-calculate logcounts after filtering\nspe_nnSVG &lt;- logNormCounts(spe_nnSVG)\n\n\n# run nnSVG\nset.seed(123)\nspe_nnSVG &lt;- nnSVG(spe_nnSVG)\n\nNow that we have run nnSVG, we can select at set of top SVGs (instead of HVGs), and use these as the input for the subsequent clustering steps.\n\n# select top SVGs\n# note: using small subset in this example\n# use larger set (e.g. top 1000 genes) in full analysis\nn_top &lt;- 50\nix_top &lt;- order(rowData(spe_nnSVG)$rank)[1:n]\ntop_svgs &lt;- rowData(spe_nnSVG)[ix_top, \"gene_id\"]\n\n\nlibrary(scater)\nlibrary(scran)\n\n\n# dimensionality reduction\n# compute PCA\n# note: using small number of components in this example\n# use larger number (e.g. ncomponents = 50) in full analysis\nset.seed(123)\nspe_nnSVG &lt;- runPCA(spe_nnSVG, ncomponents = 10, subset_row = top_svgs)\n\n\n# graph-based clustering\nset.seed(123)\nk &lt;- 10\ng &lt;- buildSNNGraph(spe_nnSVG, k = k, use.dimred = \"PCA\")\ng_walk &lt;- igraph::cluster_walktrap(g)\nclus &lt;- g_walk$membership\ntable(clus)\n##  clus\n##   1  2  3  4  5 \n##   6  6 53 24 11\n\n# store cluster labels in column 'label' in colData\ncolLabels(spe_nnSVG) &lt;- factor(clus)\n\n\n2.4.2 Clustering using concatenated features\nAn alternative strategy is to perform clustering on a set of concatenated columns of non-spatial and spatial features. For example, we can concatenate columns of non-spatial molecular features (e.g.¬†top PCs calculated on the set of top HVGs) and columns of spatial features (e.g.¬†x and y coordinates). In this case, a tuning parameter to scale the relative value ranges of the columns controls the relative weight between the two data modalities. If the tuning parameter is chosen poorly, either the molecular or spatial features may dominate the clustering. An example of this strategy was used in Maynard et al. (2021).\n\n2.4.3 Spatially-aware clustering algorithms\nAlternatively, we can use a spatially-aware clustering algorithm, which directly uses the spatial coordinates of the measurements within the clustering algorithm. Various algorithms have been developed, which have different advantages and make different assumptions, for example identifying spatially compact or spatially connected clusters.\nExamples of spatially-aware clustering algorithms include:\n\nBayesSpace: available as an R package from Bioconductor and described by Zhao et al. (2021)\nBANKSY: available as an R package from Bioconductor version 3.9 onwards and described by Singhal et al. (2024)\nSpaGCN: available as a Python package from GitHub and described by Hu et al. (2021)\nPRECAST: available as an R package from CRAN and described by Liu et al. (2023)"
  },
  {
    "objectID": "pages/clustering.html#references",
    "href": "pages/clustering.html#references",
    "title": "2¬† Clustering",
    "section": "References",
    "text": "References\n\n\n\n\nHu, Jian, Xiangjie Li, Kyle Coleman, Amelia Schroeder, Nan Ma, David J. Irwin, Edward B. Lee, Russell T. Shinohara, and Mingyao Li. 2021. ‚ÄúSpaGCN: Integrating Gene Expression, Spatial Location and Histology to Identify Spatial Domains and Spatially Variable Genes by Graph Convolutional Network.‚Äù Nature Methods 18: 1342‚Äì51. https://doi.org/10.1038/s41592-021-01255-8.\n\n\nLiu, Wei, Xu Liao, Ziye Luo, Yi Yang, Mai Chan Lau, Yuling Jiao, Xingjie Shi, et al. 2023. ‚ÄúProbabilistic Embedding, Clustering, and Alignment for Integrating Spatial Transcriptomics Data with PRECAST.‚Äù Nature Communications 14: 296. https://doi.org/10.1038/s41467-023-35947-w.\n\n\nLun, Aaron T. L., Davis J. McCarthy, and John C. Marioni. 2016. ‚ÄúA Step-by-Step Workflow for Low-Level Analysis of Single-Cell RNA-seq Data with Bioconductor.‚Äù F1000Research 5 (2122). https://doi.org/10.12688/f1000research.9501.2.\n\n\nMaynard, Kristen R., Leonardo Collado-Torres, Lukas M. Weber, Cedric Uytingco, Brianna K. Barry, Stephen R. Williams, Joseph L. Catallini II, et al. 2021. ‚ÄúTranscriptome-Scale Spatial Gene Expression in the Human Dorsolateral Prefrontal Cortex.‚Äù Nature Neuroscience 24: 425‚Äì36. https://doi.org/10.1038/s41593-020-00787-0.\n\n\nSinghal, Vipul, Nigel Chou, Joseph Lee, Yifei Yue, Jinyue Liu, Wan Kee Chock, Li Lin, et al. 2024. ‚ÄúBANKSY Unifies Cell Typing and Tissue Domain Segmentation for Scalable Spatial Omics Data Analysis.‚Äù Nature Genetics. https://doi.org/10.1038/s41588-024-01664-3.\n\n\nWeber, Lukas M., Arkajyoti Saha, Abhirup Datta, Kasper D. Hansen, and Stephanie C. Hicks. 2023. ‚ÄúnnSVG for the Scalable Identification of Spatially Variable Genes Using Nearest-Neighbor Gaussian Processes.‚Äù Nature Communications 14: 4059. https://doi.org/10.1038/s41467-023-39748-z.\n\n\nZhao, Edward, Matthew R. Stone, Xing Ren, Jamie Guenthoer, Kimberly S. Smythe, Thomas Pulliam, Stephen R. Williams, et al. 2021. ‚ÄúSpatial Transcriptomics at Subspot Resolution with BayesSpace.‚Äù Nature Biotechnology 39: 1375‚Äì84. https://doi.org/10.1038/s41587-021-00935-2."
  }
]